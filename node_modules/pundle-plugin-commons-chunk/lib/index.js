'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _pundleApi = require('pundle-api');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = (0, _pundleApi.createChunkTransformer)(function () {
  var _ref = _asyncToGenerator(function* (context, config, chunks) {
    var known = new Set();
    var newChunkFiles = new Map();

    chunks.forEach(function (chunk) {
      chunk.files.forEach(function (file) {
        if (known.has(file.filePath)) {
          newChunkFiles.set(file.filePath, file);
        } else {
          known.add(file.filePath);
        }
      });
    });

    newChunkFiles.forEach(function (file) {
      chunks.forEach(function (chunk) {
        chunk.files.delete(file.filePath);
      });
    });

    if (!newChunkFiles.size) {
      return;
    }
    var newChunk = context.getChunk(null, config.name, null);
    newChunk.files = newChunkFiles;
    chunks.push(newChunk);
  });

  return function (_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}(), {
  name: 'common'
});