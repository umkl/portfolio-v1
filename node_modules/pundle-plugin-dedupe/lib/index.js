'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _pundleApi = require('pundle-api');

var _helpers = require('./helpers');

var Helpers = _interopRequireWildcard(_helpers);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var memoryCache = new Map();
var name = '$steelbrain$dedupe$resolves';

exports.default = (0, _pundleApi.createResolver)({
  name: name,
  callback: function callback(context, config, givenRequest, fromFile) {
    var cached = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    var excluded = arguments[5];
    return _asyncToGenerator(function* () {
      if (givenRequest.slice(0, 1) === '.' || _path2.default.isAbsolute(givenRequest)) {
        return null;
      }
      var newExcluded = excluded.concat([name]);
      var result = void 0;
      try {
        result = yield context.resolveAdvanced(givenRequest, fromFile, cached, newExcluded);
      } catch (_) {
        return null;
      }
      var resultTargetManifest = result.targetManifest;
      if (!resultTargetManifest || !resultTargetManifest.version) {
        return null;
      }
      var moduleName = Helpers.getModuleName(givenRequest);
      var versions = Helpers.getModuleVersions(memoryCache, moduleName);
      var requestedVersion = Helpers.getRequiredVersion(result.sourceManifest, moduleName);

      var cacheVersion = requestedVersion || resultTargetManifest.version;
      var matched = null;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = versions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var entry = _step.value;

          if (_semver2.default.satisfies(entry.version, cacheVersion)) {
            if (matched && _semver2.default.gt(entry.version, matched.version)) {
              matched = entry;
            } else if (!matched) {
              matched = entry;
            }
          } else if (config.debug) {
            if (!fromFile) {
              throw new Error(moduleName + ' v' + entry.version + ' did not match ' + cacheVersion);
            }
            context.report(new _pundleApi.FileMessageIssue(fromFile, moduleName + ' v' + entry.version + ' did not match ' + cacheVersion));
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      if (!matched) {
        matched = resultTargetManifest;
        versions.add(matched);
      }
      var newResult = {
        filePath: _path2.default.join(matched.rootDirectory, _path2.default.relative(resultTargetManifest.rootDirectory, result.filePath)),
        sourceManifest: result.sourceManifest,
        targetManifest: matched
      };
      return newResult;
    })();
  }
}, {
  debug: false
});