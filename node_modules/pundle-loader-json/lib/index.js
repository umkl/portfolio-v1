'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _pundleApi = require('pundle-api');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = (0, _pundleApi.createLoader)(function () {
  var _ref = _asyncToGenerator(function* (context, config, file) {
    if (!(0, _pundleApi.shouldProcess)(context.config.rootDirectory, file.filePath, config)) {
      return null;
    }

    var parsed = void 0;
    try {
      parsed = JSON.parse(file.getContents());
    } catch (_) {
      throw new _pundleApi.MessageIssue('Malformed JSON found at \'' + file.filePath + '\'', 'error');
    }

    return {
      chunks: [],
      imports: [],
      sourceMap: {
        version: 3,
        sources: [file.filePath],
        names: ['$'],
        mappings: 'AAAAA'
      },
      contents: 'module.exports = ' + JSON.stringify(parsed)
    };
  });

  return function (_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}(), {
  extensions: ['json']
});