'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _pundleApi = require('pundle-api');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var checkedRootDirectories = new Set();
exports.default = (0, _pundleApi.createTransformer)(function () {
  var _ref = _asyncToGenerator(function* (context, config, file) {
    if (!(0, _pundleApi.shouldProcess)(context.config.rootDirectory, file.filePath, config)) {
      return null;
    }

    var babelPath = config.babelPath;
    try {
      babelPath = yield context.resolve(babelPath, null, true);
    } catch (_) {
      throw new _pundleApi.MessageIssue('Unable to find babel-core. Please install it in your project root (transformer-babel)', 'error');
    }

    var babel = require(babelPath);

    var processed = void 0;
    try {
      var mergedConfigs = _extends({}, config.config, {
        filename: file.filePath,
        sourceMap: true,
        highlightCode: false,
        sourceFileName: file.filePath
      });
      if (!checkedRootDirectories.has(context.config.rootDirectory) && false) {
        var check = babel.transform('export default class Foo {}', _extends({}, mergedConfigs, {
          filename: _path2.default.join(context.config.rootDirectory, 'test.js')
        })).code;
        if (!check.includes('export default') && !check.includes('export { Foo as default }')) {
          throw new _pundleApi.MessageIssue('Your Babel configuration specifies a module transformer. Please disable it. See https://github.com/rollup/rollup-plugin-babel#configuring-babel for more information');
        }
        checkedRootDirectories.add(context.config.rootDirectory);
      }
      processed = babel.transform(file.getContents(), mergedConfigs);
    } catch (error) {
      if (error.loc) {
        throw new _pundleApi.FileIssue(file.getFilePath(), file.getContents(), error.loc.line, error.loc.column, error.message, 'error');
      } else {
        throw new _pundleApi.FileMessageIssue(file.getFilePath(), error.message);
      }
    }
    var contents = processed.code;
    var sourceMap = processed.map;

    return { contents: contents, sourceMap: sourceMap };
  });

  return function (_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}(), {
  babelPath: 'babel-core',

  config: {},
  extensions: [],
  exclude: [/(node_modules|bower_components)/]
});