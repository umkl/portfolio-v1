'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCacheFilePath = exports.browserFile = undefined;

var getCacheFilePath = exports.getCacheFilePath = function () {
  var _ref = _asyncToGenerator(function* (directory) {
    var stateDirectory = _path2.default.join(_os2.default.homedir(), '.pundle');
    try {
      yield _sbFs2.default.stat(stateDirectory);
    } catch (error) {
      if (error.code === 'ENOENT') {
        yield _sbFs2.default.mkdir(stateDirectory);
      } else throw error;
    }

    var inputHash = _crypto2.default.createHash('sha1').update(directory).digest('hex');
    return _path2.default.join(stateDirectory, inputHash + '.json');
  });

  return function getCacheFilePath(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.fillConfig = fillConfig;
exports.isPundleRegistered = isPundleRegistered;
exports.registerPundle = registerPundle;
exports.unregisterPundle = unregisterPundle;
exports.getWssServer = getWssServer;
exports.getChunkId = getChunkId;

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _sbFs = require('sb-fs');

var _sbFs2 = _interopRequireDefault(_sbFs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var browserFile = exports.browserFile = require.resolve('./browser');
function fillConfig(given) {
  var config = {};

  if (given.hmrHost) {
    (0, _assert2.default)(typeof given.hmrHost === 'string', 'config.hmrHost must be a string');
    config.hmrHost = given.hmrHost;
  } else config.hmrHost = null;
  if (given.hmrPath) {
    (0, _assert2.default)(typeof given.hmrPath === 'string', 'config.hmrPath must be a string');
    config.hmrPath = given.hmrPath;
  } else config.hmrHost = '__sb_pundle_hmr';
  if (typeof given.useCache !== 'undefined') {
    config.useCache = !!given.useCache;
  } else config.useCache = true;
  if (typeof given.hmrReports !== 'undefined') {
    config.hmrReports = !!given.hmrReports;
  } else config.hmrReports = true;
  if (given.bundlePath) {
    (0, _assert2.default)(typeof given.bundlePath === 'string', 'config.bundlePath must be a string');
    config.bundlePath = given.bundlePath;
  } else config.bundlePath = '/bundle.js';
  if (typeof given.sourceMap !== 'undefined') {
    config.sourceMap = !!given.sourceMap;
  } else config.sourceMap = true;
  if (given.sourceMapPath) {
    (0, _assert2.default)(typeof given.sourceMapPath === 'string', 'config.sourceMapPath must be a string');
    config.sourceMapPath = given.sourceMapPath;
  } else config.sourceMapPath = config.bundlePath + '.map';

  (0, _assert2.default)(given.port && typeof given.port === 'number', 'config.port must be a valid number');
  (0, _assert2.default)(given.rootDirectory && typeof given.rootDirectory === 'string', 'config.rootDirectory must be a valid string');
  config.port = given.port;
  config.rootDirectory = given.rootDirectory;
  config.redirectNotFoundToIndex = !!given.redirectNotFoundToIndex;

  return config;
}

function isPundleRegistered(pundle) {
  return pundle.config.entry.indexOf(browserFile) !== -1 || pundle.config.replaceVariables.SB_PUNDLE_HMR_PATH || pundle.config.replaceVariables.SB_PUNDLE_HMR_PATH;
}

function registerPundle(pundle, config) {
  pundle.config.entry.push(browserFile);
  pundle.config.replaceVariables.SB_PUNDLE_HMR_PATH = JSON.stringify(config.hmrPath);
  pundle.config.replaceVariables.SB_PUNDLE_HMR_HOST = JSON.stringify(config.hmrHost);
}

function unregisterPundle(pundle) {
  delete pundle.config.replaceVariables.SB_PUNDLE_HMR_PATH;
  delete pundle.config.replaceVariables.SB_PUNDLE_HMR_HOST;
  var browserFileIndex = pundle.config.entry.indexOf(browserFile);
  if (browserFileIndex !== -1) {
    pundle.config.entry.splice(browserFileIndex, 1);
  }
}

function getWssServer() {
  try {
    return require('uws').Server;
  } catch (error) {
    if (error.code !== 'MODULE_NOT_FOUND') {
      throw error;
    }
    return require('ws').Server;
  }
}

function getChunkId(url, bundlePath) {
  var expected = _path2.default.basename(bundlePath);
  var expectedExt = expected.endsWith('.js.map') ? '.js.map' : _path2.default.extname(expected);
  var expectedPrefix = expected.slice(0, -1 * expectedExt.length);

  var given = _path2.default.basename(url).slice(expectedPrefix.length + 1);
  var givenExt = given.endsWith('.js.map') ? '.js.map' : _path2.default.extname(given);
  var givenId = given.slice(0, -1 * givenExt.length);

  return givenId || '1';
}