'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _sbFs = require('sb-fs');

var _sbFs2 = _interopRequireDefault(_sbFs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash.uniq');

var _lodash2 = _interopRequireDefault(_lodash);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _promise = require('promise.defer');

var _promise2 = _interopRequireDefault(_promise);

var _sbEventKit = require('sb-event-kit');

var _pundleApi = require('pundle-api');

var _helpers = require('./helpers');

var Helpers = _interopRequireWildcard(_helpers);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WssServer = Helpers.getWssServer();
var cliReporter = require('pundle-reporter-default');

var Server = function () {
  function Server(pundle, config) {
    _classCallCheck(this, Server);

    if (Helpers.isPundleRegistered(pundle)) {
      throw new Error('Cannot create two middlewares on one Pundle instance');
    }

    this.state = {
      queue: Promise.resolve(),
      files: new Map(),
      chunks: [],
      changed: new Map()
    };
    this.pundle = pundle;
    this.config = Helpers.fillConfig(config);
    this.connections = new Set();
    this.subscriptions = new _sbEventKit.CompositeDisposable();

    Helpers.registerPundle(pundle, this.config);
  }

  _createClass(Server, [{
    key: 'activate',
    value: function () {
      var _ref = _asyncToGenerator(function* () {
        var _this = this;

        var app = (0, _express2.default)();

        this.cache = yield this.pundle.getCache();
        if (this.config.useCache) {
          var state = yield this.cache.get('state');
          if (state) {
            this.pundle.context.unserialize(state);
          }
          var oldFiles = yield this.cache.get('files');
          this.report('Number of files in cache pool: ' + oldFiles.length);
        }

        yield this.attachRoutes(app);
        yield this.attachComponents();

        var server = app.listen(this.config.port);
        if (this.config.hmrPath) {
          var wss = new WssServer({ server: server, path: this.config.hmrPath });
          wss.on('connection', function (connection) {
            connection.on('close', function () {
              return _this.connections.delete(connection);
            });
            _this.connections.add(connection);
          });
        }
        try {
          this.subscriptions.add((yield this.pundle.watch(this.config.useCache)));
        } catch (error) {
          server.close();
          throw error;
        }
        this.subscriptions.add(function () {
          server.close();
        });
      });

      function activate() {
        return _ref.apply(this, arguments);
      }

      return activate;
    }()
  }, {
    key: 'attachRoutes',
    value: function attachRoutes(app) {
      var _this2 = this;

      var bundlePathExt = _path2.default.extname(this.config.bundlePath);
      app.get([this.config.bundlePath, this.config.bundlePath.slice(0, -1 * bundlePathExt.length) + '*'], function (req, res, next) {
        _this2.generateChunk(req.url).then(function (chunk) {
          if (!chunk) {
            next();
            return;
          }
          if (req.url.endsWith('.js.map')) {
            res.set('content-type', 'application/json');
            res.end(JSON.stringify(chunk.sourceMap));
          } else {
            res.set('content-type', 'application/javascript');
            res.end(chunk.contents);
          }
        }).catch(next);
      });

      var serveFilledHtml = function serveFilledHtml(req, res, next) {
        _this2.state.queue.then(function () {
          return _sbFs2.default.readFile(_path2.default.join(_this2.pundle.config.rootDirectory, 'index.html'), 'utf8');
        }).then(function (contents) {
          res.set('content-type', 'text/html');
          res.end(_this2.pundle.fill(contents, _this2.state.chunks, {
            publicRoot: _path2.default.dirname(_this2.config.bundlePath),
            bundlePath: _path2.default.basename(_this2.config.bundlePath)
          }));
        }, function (error) {
          if (error.code === 'ENOENT') {
            next();
          } else next(error);
        });
      };
      app.get('/', serveFilledHtml);

      app.use('/', _express2.default.static(this.config.rootDirectory));
      if (this.config.redirectNotFoundToIndex) {
        app.use(serveFilledHtml);
      }
    }
  }, {
    key: 'attachComponents',
    value: function () {
      var _ref2 = _asyncToGenerator(function* () {
        var _this3 = this;

        var booted = false;
        var boot = (0, _promise2.default)();
        this.enqueue(function () {
          return boot.promise;
        });
        this.subscriptions.add((yield this.pundle.loadComponents([[cliReporter, {
          log: function log(text, error) {
            if (_this3.config.hmrReports && error.severity && error.severity !== 'info') {
              _this3.writeToConnections({ type: 'report', text: text, severity: error.severity || 'error' });
            }
          }
        }], (0, _pundleApi.createWatcher)({
          tick: function tick(_, __, file) {
            if (booted && file.filePath !== Helpers.browserFile) {
              _this3.state.changed.set(file.filePath, file);
            }
          },
          ready: function ready() {
            _this3.report('Server initialized successfully');
          },
          compile: function () {
            var _ref3 = _asyncToGenerator(function* (_, __, chunks, files) {
              _this3.state.files = files;
              _this3.state.chunks = chunks;
              if (_this3.connections.size && _this3.state.changed.size) {
                yield _this3.generateForHMR();
              }
              boot.resolve();
              booted = true;
            });

            return function compile(_x, _x2, _x3, _x4) {
              return _ref3.apply(this, arguments);
            };
          }()
        })])));
      });

      function attachComponents() {
        return _ref2.apply(this, arguments);
      }

      return attachComponents;
    }()
  }, {
    key: 'generate',
    value: function () {
      var _ref4 = _asyncToGenerator(function* (chunk) {
        var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var merged = _extends({
          wrapper: 'hmr',
          bundlePath: _path2.default.basename(this.config.bundlePath),
          publicRoot: _path2.default.dirname(this.config.bundlePath),
          sourceMap: this.config.sourceMap,
          sourceMapPath: this.config.sourceMapPath,
          sourceNamespace: 'app'
        }, config);

        this.state.changed.clear();
        var generated = yield this.pundle.generate([chunk], merged);
        var output = generated[0];
        if (merged.sourceMap && merged.sourceMapPath !== 'inline') {
          var bundlePathExt = _path2.default.extname(this.config.bundlePath);
          var bundlePathPrefix = this.config.bundlePath.slice(0, -1 * bundlePathExt.length);
          output.contents += '\n//# sourceMappingURL=' + bundlePathPrefix + '.' + output.chunk.getIdOrLabel() + bundlePathExt + '.map\n';
        }
        return output;
      });

      function generate(_x5) {
        return _ref4.apply(this, arguments);
      }

      return generate;
    }()
  }, {
    key: 'generateForHMR',
    value: function () {
      var _ref5 = _asyncToGenerator(function* () {
        var rootDirectory = this.pundle.config.rootDirectory;

        var changedFilePaths = (0, _lodash2.default)(Array.from(this.state.changed.keys()));
        var relativeChangedFilePaths = changedFilePaths.map(function (i) {
          return (0, _pundleApi.getRelativeFilePath)(i, rootDirectory);
        });
        this.report('Sending HMR to ' + this.connections.size + ' client' + (this.connections.size > 1 ? 's' : '') + ' of [ ' + (relativeChangedFilePaths.length > 4 ? relativeChangedFilePaths.length + ' files' : relativeChangedFilePaths.join(', ')) + ' ]');
        this.writeToConnections({ type: 'report-clear' });

        var label = 'hmr-' + Date.now();
        var chunk = this.pundle.context.getChunk(null, label, null);
        chunk.files = new Map(this.state.changed);
        var generated = yield this.generate(chunk, {
          sourceMapPath: 'inline',
          sourceMapNamespace: 'hmr-' + Date.now()
        });
        this.writeToConnections({ type: 'hmr', contents: generated.contents, files: generated.filesGenerated });
      });

      function generateForHMR() {
        return _ref5.apply(this, arguments);
      }

      return generateForHMR;
    }()
  }, {
    key: 'generateChunk',
    value: function () {
      var _ref6 = _asyncToGenerator(function* (url) {
        var _this4 = this;

        yield this.state.queue;

        var chunkId = Helpers.getChunkId(url, this.config.bundlePath);
        var chunk = this.state.chunks.find(function (entry) {
          return entry.id.toString() === chunkId || entry.label === chunkId;
        });
        if (!chunk) {
          return null;
        }

        var generated = void 0;
        this.enqueue(function () {
          return _this4.generate(chunk).then(function (result) {
            generated = result;
          });
        });
        yield this.state.queue;
        return generated;
      });

      function generateChunk(_x7) {
        return _ref6.apply(this, arguments);
      }

      return generateChunk;
    }()
  }, {
    key: 'report',
    value: function report(contents) {
      var severity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'info';

      this.pundle.context.report(new _pundleApi.MessageIssue(contents, severity));
    }
  }, {
    key: 'enqueue',
    value: function enqueue(callback) {
      var _this5 = this;

      this.state.queue = this.state.queue.then(callback).catch(function (e) {
        return _this5.pundle.context.report(e);
      });
    }
  }, {
    key: 'writeToConnections',
    value: function writeToConnections(contents) {
      var stringifiedContents = JSON.stringify(contents);
      this.connections.forEach(function (connection) {
        return connection.send(stringifiedContents);
      });
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      if (!this.subscriptions.disposed) {
        this.pundle.setCachedFiles(this.cache, this.state.files);
        this.cache.setSync('state', this.pundle.context.serialize());
        Helpers.unregisterPundle(this.pundle);
      }
      this.subscriptions.dispose();
    }
  }]);

  return Server;
}();

module.exports = Server;