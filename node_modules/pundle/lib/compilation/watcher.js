'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _chokidar = require('chokidar');

var _chokidar2 = _interopRequireDefault(_chokidar);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Watcher = function (_EventEmitter) {
  _inherits(Watcher, _EventEmitter);

  function Watcher(config) {
    _classCallCheck(this, Watcher);

    var _this = _possibleConstructorReturn(this, (Watcher.__proto__ || Object.getPrototypeOf(Watcher)).call(this));

    _this.paths = new Map();
    _this.chokidar = _chokidar2.default.watch([], {
      usePolling: config.usePolling,
      ignoreInitial: true
    });
    _this.chokidar.on('add', function (filePath) {
      return _this.emit('change', filePath);
    });
    _this.chokidar.on('unlink', function (filePath) {
      return _this.emit('unlink', filePath);
    });
    _this.chokidar.on('change', function (filePath) {
      return _this.emit('change', filePath);
    });
    return _this;
  }

  _createClass(Watcher, [{
    key: 'watch',
    value: function watch(filePath) {
      (0, _assert2.default)(typeof filePath === 'string', 'filePath must be string');
      var count = this.paths.get(filePath) || 0;
      var newCount = count + 1;
      this.paths.set(filePath, newCount);

      if (newCount === 1) {
        this.chokidar.add(filePath);
      }
    }
  }, {
    key: 'unwatch',
    value: function unwatch(filePath) {
      (0, _assert2.default)(typeof filePath === 'string', 'filePath must be string');
      var count = this.paths.get(filePath) || 0;
      var newCount = count - 1;
      if (newCount < 1) {
        this.chokidar.unwatch(filePath);
        this.paths.delete(filePath);
      }
    }
  }, {
    key: 'getWatchedFiles',
    value: function getWatchedFiles() {
      return Array.from(this.paths.keys());
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      this.paths.clear();
      this.chokidar.close();
      this.removeAllListeners();
    }
  }]);

  return Watcher;
}(_events2.default);

exports.default = Watcher;