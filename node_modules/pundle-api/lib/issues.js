'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileMessageIssue = exports.MessageIssue = exports.FileIssue = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _helpers = require('./helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var VALID_SEVERITIES = new Set(['info', 'warning', 'error']);

var FileIssue = exports.FileIssue = function () {
  function FileIssue(file, contents, line, column, message) {
    var severity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'error';

    _classCallCheck(this, FileIssue);

    (0, _assert2.default)(typeof file === 'string' && file, 'File must be a valid string');
    (0, _assert2.default)(typeof contents === 'string' && contents, 'Contents must be a valid string');
    (0, _assert2.default)(typeof line === 'number' && line > -1, 'Line must be a valid number');
    (0, _assert2.default)(typeof column === 'number' && column > -1, 'Column must be a valid number');
    (0, _assert2.default)(typeof message === 'string' && message, 'Message must be a valid string');
    (0, _assert2.default)(VALID_SEVERITIES.has(severity), 'Severity must be valid');

    this.file = file;
    this.line = line;
    this.column = column;
    this.contents = contents;
    this.message = (0, _helpers.extractMessage)(message);
    this.severity = severity.toLowerCase();
    this.$updateStack();
  }

  _createClass(FileIssue, [{
    key: '$updateStack',
    value: function $updateStack() {
      this.stack = 'FileIssue: ' + this.message + '\n    at ' + this.file + ':' + this.line + ':' + this.column;
    }
  }]);

  return FileIssue;
}();

var MessageIssue = exports.MessageIssue = function MessageIssue(message) {
  var severity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'error';

  _classCallCheck(this, MessageIssue);

  (0, _assert2.default)(typeof message === 'string' && message, 'Message must be a valid string');
  (0, _assert2.default)(VALID_SEVERITIES.has(severity), 'Severity must be valid');

  this.message = message;
  this.severity = severity;
  this.stack = 'MessageIssue: ' + severity.toUpperCase() + ': ' + message;
};

var FileMessageIssue = exports.FileMessageIssue = function () {
  function FileMessageIssue(file, message) {
    var line = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var column = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

    _classCallCheck(this, FileMessageIssue);

    (0, _assert2.default)(typeof file === 'string' && file, 'File must be a valid string');
    (0, _assert2.default)(typeof message === 'string' && message, 'Message must be a valid string');
    (0, _assert2.default)(typeof line === 'number' || line === null, 'Line must be a valid number or null');
    (0, _assert2.default)(typeof column === 'number' || column === null, 'Column must be a valid number or null');

    this.file = file;
    this.line = line;
    this.column = column;
    this.message = (0, _helpers.extractMessage)(message);

    this.$updateStack();
  }

  _createClass(FileMessageIssue, [{
    key: '$updateStack',
    value: function $updateStack() {
      this.stack = 'FileMessageIssue: ' + this.message + ' at ' + this.file;
      if (this.line) {
        this.stack += this.line + ':' + (this.column || 0);
      }
    }
  }]);

  return FileMessageIssue;
}();