'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.matchesRules = matchesRules;
exports.shouldProcess = shouldProcess;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _ignore = require('ignore');

var _ignore2 = _interopRequireDefault(_ignore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function matchesRules(relativePath, rules) {
  var fileName = _path2.default.basename(relativePath);
  var ignoreRules = [];

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = rules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var rule = _step.value;

      if (!(rule instanceof RegExp)) {
        ignoreRules.push(rule);
        continue;
      }
      if (rule.test(relativePath) || rule.test(fileName)) {
        return true;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (ignoreRules.length && (0, _ignore2.default)().add(ignoreRules).filter([relativePath, fileName]).length !== 2) {
    return true;
  }

  return false;
}

function shouldProcess(sourceRoot, filePath, config) {
  var relativePath = _path2.default.relative(sourceRoot, filePath);

  var exclude = config.exclude;
  if (exclude) {
    if (matchesRules(relativePath, [].concat(exclude))) {
      return false;
    }
  }
  var include = config.include;
  if (include) {
    if (!matchesRules(relativePath, [].concat(include))) {
      return false;
    }
  }
  var extensions = config.extensions;
  if (extensions) {
    var fileExtension = _path2.default.extname(filePath).slice(1);
    if (extensions.indexOf(fileExtension) === -1) {
      return false;
    }
  }

  return !!(include || exclude || extensions);
}