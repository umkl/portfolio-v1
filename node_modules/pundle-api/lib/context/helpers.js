'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAllKnownExtensions = getAllKnownExtensions;
exports.mergeResult = mergeResult;

var _lodash = require('lodash.uniq');

var _lodash2 = _interopRequireDefault(_lodash);

var _mergeSourceMap = require('merge-source-map');

var _mergeSourceMap2 = _interopRequireDefault(_mergeSourceMap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getAllKnownExtensions(components) {
  var toReturn = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = components[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var entry = _step.value;

      if (entry.component.$type === 'loader') {
        if (Array.isArray(entry.config.extensions)) {
          toReturn = toReturn.concat(entry.config.extensions);
        } else if (Array.isArray(entry.component.defaultConfig.extensions)) {
          toReturn = toReturn.concat(entry.component.defaultConfig.extensions);
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return (0, _lodash2.default)(toReturn);
}

function mergeResult(file, result) {
  if (!result) {
    return;
  }
  if (file.sourceMap && !result.sourceMap) {
    file.sourceMap = null;
  } else if (file.sourceMap && result.sourceMap) {
    file.sourceMap = (0, _mergeSourceMap2.default)(file.sourceMap, result.sourceMap);
  } else if (!file.sourceMap && result.sourceMap) {
    file.sourceMap = result.sourceMap;
  }
  file.contents = result.contents;
}