'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _sbEventKit = require('sb-event-kit');

var _helpers = require('../helpers');

var _issues = require('../issues');

var _fileChunk = require('../file-chunk');

var _fileChunk2 = _interopRequireDefault(_fileChunk);

var _helpers2 = require('./helpers');

var Helpers = _interopRequireWildcard(_helpers2);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Context = function () {
  function Context(config) {
    _classCallCheck(this, Context);

    this.uid = new Map();
    this.config = config;
    this.components = new Set();
  }

  _createClass(Context, [{
    key: 'report',
    value: function () {
      var _ref = _asyncToGenerator(function* (_report) {
        var tried = false;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this.getComponents('reporter')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var entry = _step.value;

            yield this.invokeComponent(entry, 'callback', [], [_report]);
            tried = true;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        if (!tried) {
          console.error(_report);
        }
      });

      function report(_x) {
        return _ref.apply(this, arguments);
      }

      return report;
    }()
  }, {
    key: 'resolveAdvanced',
    value: function () {
      var _ref2 = _asyncToGenerator(function* (request) {
        var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var cached = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var exclude = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

        var knownExtensions = Helpers.getAllKnownExtensions(this.components);
        var filteredComponents = this.getComponents('resolver', exclude);
        if (!filteredComponents.length) {
          throw new _issues.MessageIssue('No module resolver configured in Pundle. Try adding pundle-resolver-default to your configuration', 'error');
        }
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = filteredComponents[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var entry = _step2.value;

            var result = yield this.invokeComponent(entry, 'callback', [{ knownExtensions: knownExtensions }], [request, from, cached, exclude]);
            if (result && result.filePath) {
              return result;
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        throw new _issues.FileMessageIssue(from || this.config.rootDirectory, 'Cannot find module \'' + request + '\'');
      });

      function resolveAdvanced(_x2) {
        return _ref2.apply(this, arguments);
      }

      return resolveAdvanced;
    }()
  }, {
    key: 'resolve',
    value: function () {
      var _ref3 = _asyncToGenerator(function* (request) {
        var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var cached = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var exclude = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

        var resolved = yield this.resolveAdvanced(request, from, cached, exclude);
        return resolved.filePath;
      });

      function resolve(_x6) {
        return _ref3.apply(this, arguments);
      }

      return resolve;
    }()
  }, {
    key: 'generate',
    value: function () {
      var _ref4 = _asyncToGenerator(function* (given) {
        var _this = this;

        var generateConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var chunks = given.slice();
        var results = [];

        var _loop = function* _loop(i, length) {
          var chunk = chunks[i];
          var chunkMappings = { chunks: {} };

          var childChunks = new Map();
          chunk.files.forEach(function (file) {
            file.getChunks().forEach(function (entry) {
              childChunks.set(entry.id, entry);
            });
          });
          childChunks.forEach(function (entry) {
            chunkMappings.chunks[entry.getId()] = entry.getLabel();
          });

          var result = void 0;
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = _this.getComponents('generator')[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var entry = _step3.value;

              result = yield _this.invokeComponent(entry, 'callback', [_this.config.output, {
                label: chunk.label,
                mappings: chunkMappings
              }, generateConfig], [chunk]);
              if (result) {
                break;
              }
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }

          if (!result) {
            throw new _issues.MessageIssue('No generator returned generated contents. Try adding pundle-generator-default to your configuration', 'error');
          }
          var _iteratorNormalCompletion4 = true;
          var _didIteratorError4 = false;
          var _iteratorError4 = undefined;

          try {
            for (var _iterator4 = _this.getComponents('post-transformer')[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
              var _entry = _step4.value;

              var postTransformerResults = yield _this.invokeComponent(_entry, 'callback', [], [result.contents]);
              Helpers.mergeResult(result, postTransformerResults);
            }
          } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion4 && _iterator4.return) {
                _iterator4.return();
              }
            } finally {
              if (_didIteratorError4) {
                throw _iteratorError4;
              }
            }
          }

          results.push(result);
        };

        for (var i = 0, length = chunks.length; i < length; i++) {
          yield* _loop(i, length);
        }

        return results;
      });

      function generate(_x10) {
        return _ref4.apply(this, arguments);
      }

      return generate;
    }()
  }, {
    key: 'serialize',
    value: function serialize() {
      var serializedUID = {};
      this.uid.forEach(function (value, key) {
        serializedUID[key] = value;
      });

      return JSON.stringify({
        UID: serializedUID
      });
    }
  }, {
    key: 'unserialize',
    value: function unserialize(contents) {
      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (this.uid.size && !force) {
        throw new Error('Cannot unserialize into non-empty state without force parameter');
      }

      var parsed = JSON.parse(contents);

      this.uid.clear();
      for (var key in parsed.UID) {
        if (!{}.hasOwnProperty.call(parsed.UID, key)) continue;
        this.uid.set(key, parsed.UID[key]);
      }
    }
  }, {
    key: 'getUID',
    value: function getUID(label) {
      var uid = (this.uid.get(label) || 0) + 1;
      this.uid.set(label, uid);
      return uid;
    }
  }, {
    key: 'getChunk',
    value: function getChunk() {
      var label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      var id = this.getUID('chunk');
      return new _fileChunk2.default(id, label);
    }
  }, {
    key: 'getImportRequest',
    value: function getImportRequest(request) {
      var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      return {
        id: this.getUID('import'),
        request: request,
        resolved: null,
        from: from,
        type: 'cjs',
        namespaces: []
      };
    }
  }, {
    key: 'getComponents',
    value: function getComponents() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var exclude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      var entries = Array.from(this.components);
      if (type) {
        entries = entries.filter(function (i) {
          return i.component.$type === type;
        });
      }
      if (exclude.length) {
        entries = entries.filter(function (entry) {
          var name = entry.component.name;
          return !name || !exclude.includes(name);
        });
      }
      return entries;
    }
  }, {
    key: 'addComponent',
    value: function addComponent(component, config) {
      var _this2 = this;

      if (!component) {
        throw new Error('Invalid component provided');
      }
      if (component.$apiVersion !== _helpers.version) {
        throw new Error('API version of component mismatches');
      }
      this.components.add({ component: component, config: config });
      this.invokeComponent({ component: component, config: config }, 'activate', [], []);
      return new _sbEventKit.Disposable(function () {
        _this2.deleteComponent(component, config);
      });
    }
  }, {
    key: 'deleteComponent',
    value: function deleteComponent(component, config) {
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = this.components[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var entry = _step5.value;

          if (entry.config === config && entry.component === component) {
            this.components.delete(entry);
            this.invokeComponent(entry, 'dispose', [], []);
            return true;
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      return false;
    }
  }, {
    key: 'invokeComponent',
    value: function () {
      var _ref5 = _asyncToGenerator(function* (entry, method, configs, parameters) {
        var _entry$component;

        (0, _assert2.default)((typeof entry === 'undefined' ? 'undefined' : _typeof(entry)) === 'object' && entry, 'Component must be a valid object');
        (0, _assert2.default)(typeof entry.component[method] === 'function', 'Component method \'' + method + '\' does not exist on given component');

        var mergedConfigs = Object.assign.apply(Object, [{}, entry.component.defaultConfig, entry.config].concat(_toConsumableArray(configs)));

        return (_entry$component = entry.component)[method].apply(_entry$component, [this, mergedConfigs].concat(_toConsumableArray(parameters)));
      });

      function invokeComponent(_x17, _x18, _x19, _x20) {
        return _ref5.apply(this, arguments);
      }

      return invokeComponent;
    }()
  }]);

  return Context;
}();

exports.default = Context;