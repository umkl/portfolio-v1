'use strict';

var CACHE_DELETED = Symbol('cache deleted');

function getCacheKey(parameters) {
  return JSON.stringify(parameters);
}

function memoize(callback) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var cache = {};

  function memoized() {
    for (var _len = arguments.length, parameters = Array(_len), _key = 0; _key < _len; _key++) {
      parameters[_key] = arguments[_key];
    }

    var cacheKey = getCacheKey(parameters);

    if (cacheKey in cache && cache[cacheKey] !== CACHE_DELETED) {
      var _value = cache[cacheKey];
      if (options.async && !(_value && _value.constructor.name === 'Promise')) {
        return Promise.resolve(_value);
      }
      return _value;
    }

    var value = callback.apply(this, parameters);

    cache[cacheKey] = value;
    if (!options.async) {
      return value;
    }
    if (!value || value.constructor.name !== 'Promise') {
      throw new Error('Memoization Error, Async function returned non-promise value');
    }
    return value.then(function (realValue) {
      cache[cacheKey] = realValue;
      return realValue;
    }, function (error) {
      cache[cacheKey] = CACHE_DELETED;
      throw error;
    });
  }
  memoized.clearCache = function () {
    cache = {};
  };
  memoized.getCache = function (parameters) {
    var cachedValue = cache[getCacheKey(parameters)];
    if (cachedValue === CACHE_DELETED) {
      return undefined;
    }
    return cachedValue;
  };
  memoized.setCache = function (parameters, value) {
    cache[getCacheKey(parameters)] = value;
  };
  memoized.deleteCache = function (parameters) {
    cache[getCacheKey(parameters)] = CACHE_DELETED;
  };

  return memoized;
}

module.exports = memoize;