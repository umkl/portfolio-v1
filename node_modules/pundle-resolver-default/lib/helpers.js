'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MODULE_SEPARATOR_REGEX = undefined;
exports.promisedResolve = promisedResolve;
exports.isModuleRequested = isModuleRequested;
exports.isModuleOnly = isModuleOnly;
exports.findManifest = findManifest;
exports.getManifest = getManifest;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _resolve = require('resolve');

var _resolve2 = _interopRequireDefault(_resolve);

var _sbMemoize = require('sb-memoize');

var _sbMemoize2 = _interopRequireDefault(_sbMemoize);

var _sbFs = require('sb-fs');

var _sbFs2 = _interopRequireDefault(_sbFs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var MODULE_SEPARATOR_REGEX = exports.MODULE_SEPARATOR_REGEX = /\/|\\/;

function promisedResolve(request, options) {
  return new Promise(function (resolvePromise, rejectPromise) {
    (0, _resolve2.default)(request, options, function (error, path) {
      if (error && error.code !== 'MODULE_NOT_FOUND') {
        rejectPromise(error);
      } else {
        resolvePromise(path || null);
      }
    });
  });
}

function isModuleRequested(request) {
  return !(_path2.default.isAbsolute(request) || request.substr(0, 1) === '.');
}
function isModuleOnly(request) {
  var chunks = request.split(MODULE_SEPARATOR_REGEX);
  return chunks.length === 1;
}

var findManifestCached = (0, _sbMemoize2.default)(function () {
  var _ref = _asyncToGenerator(function* (givenFileDirectory, config, cached, pundleConfig) {
    var fileDirectory = givenFileDirectory;
    if (fileDirectory.slice(-1) === '/') {
      fileDirectory = fileDirectory.slice(0, -1);
    }

    var limitPath = '';

    if (fileDirectory.indexOf(pundleConfig.rootDirectory) === 0) {
      limitPath = pundleConfig.rootDirectory;
    } else {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = config.modulesDirectories[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var moduleDirectory = _step.value;

          var lastIndex = fileDirectory.lastIndexOf(moduleDirectory);
          if (lastIndex !== -1) {
            limitPath = fileDirectory.slice(0, lastIndex + moduleDirectory.length);
            break;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    var manifestPath = _path2.default.join(fileDirectory, 'package.json');
    try {
      yield _sbFs2.default.stat(manifestPath);
      return manifestPath;
    } catch (_) {}

    if (fileDirectory === limitPath || fileDirectory === '/' || fileDirectory.slice(-2) === ':\\') {
      return null;
    }
    return findManifestCached(_path2.default.dirname(fileDirectory), config, cached, pundleConfig);
  });

  return function (_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}(), { async: true });

function findManifest(fileDirectory, config, cached, pundleConfig) {
  if (!cached) {
    var cachedValue = findManifestCached.getCache([fileDirectory, config, cached, pundleConfig]);
    if (typeof cachedValue === 'string') {
      findManifestCached.deleteCache([_path2.default.dirname(cachedValue), config, cached, pundleConfig]);
    }
  }
  return findManifestCached(fileDirectory, config, cached, pundleConfig);
}

var getManifestCached = (0, _sbMemoize2.default)(function () {
  var _ref2 = _asyncToGenerator(function* (fileDirectory, config, cached, pundleConfig) {
    var manifest = {};
    var manifestPath = yield findManifest(fileDirectory, config, cached, pundleConfig);
    if (manifestPath) {
      manifest = JSON.parse((yield _sbFs2.default.readFile(manifestPath)));
      manifest.rootDirectory = _path2.default.dirname(manifestPath);
    }
    return manifest;
  });

  return function (_x5, _x6, _x7, _x8) {
    return _ref2.apply(this, arguments);
  };
}(), { async: true });

function getManifest(fileDirectory, config, cached, pundleConfig) {
  if (!cached) {
    var cachedValue = getManifestCached.getCache([fileDirectory, config, cached, pundleConfig]);
    if (typeof cachedValue === 'string') {
      getManifestCached.deleteCache([_path2.default.dirname(cachedValue), config, cached, pundleConfig]);
    }
  }
  return getManifestCached(fileDirectory, config, cached, pundleConfig);
}