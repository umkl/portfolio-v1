'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _sbFs = require('sb-fs');

var _sbFs2 = _interopRequireDefault(_sbFs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _pundle = require('pundle');

var _pundle2 = _interopRequireDefault(_pundle);

var _pundleDev = require('pundle-dev');

var _pundleDev2 = _interopRequireDefault(_pundleDev);

var _pundleApi = require('pundle-api');

var _sbEventKit = require('sb-event-kit');

var _cli = require('./cli');

var _cli2 = _interopRequireDefault(_cli);

var _helpers = require('./helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Compilation = function () {
  function Compilation(projectPath, config, options) {
    var _this = this;

    _classCallCheck(this, Compilation);

    this.cli = new _cli2.default(projectPath, config, options);
    this.config = config;
    this.options = options;
    this.projectPath = projectPath;
    this.subscriptions = new _sbEventKit.CompositeDisposable();

    this.subscriptions.add(this.cli);
    this.cli.onShouldBuild(function () {
      return _this.build(_this.options.useCache);
    });
  }

  _createClass(Compilation, [{
    key: 'watch',
    value: function () {
      var _ref = _asyncToGenerator(function* (useCache) {
        var pundle = yield this.getPundle(true);
        var server = new _pundleDev2.default(pundle, {
          port: this.config.webServerPort,
          rootDirectory: this.config.outputDirectory,
          hmrPath: '/_/bundle_hmr',
          bundlePath: '/_/bundle.js',
          useCache: useCache,
          publicPath: '/',
          sourceMapPath: '/_/bundle.js.map',
          redirectNotFoundToIndex: true
        });
        this.subscriptions.add(server);
        if (process.stdout.isTTY) {
          this.cli.activate();
        }
        yield server.activate();
      });

      function watch(_x) {
        return _ref.apply(this, arguments);
      }

      return watch;
    }()
  }, {
    key: 'build',
    value: function () {
      var _ref2 = _asyncToGenerator(function* (useCache) {
        var pundle = yield this.getPundle(false);
        var outputs = yield pundle.generate((yield pundle.build(useCache)), {
          sourceMap: false
        });
        yield this.writeToDisk(outputs);
      });

      function build(_x2) {
        return _ref2.apply(this, arguments);
      }

      return build;
    }()
  }, {
    key: 'writeToDisk',
    value: function () {
      var _ref3 = _asyncToGenerator(function* (outputs) {
        var pundle = yield this.getPundle();
        var outputDirectory = this.config.outputDirectory;

        yield _sbFs2.default.mkdirp(_path2.default.join(outputDirectory, '_'));
        yield Promise.all(outputs.map(function (output) {
          return _sbFs2.default.writeFile(_path2.default.join(outputDirectory, '_', 'bundle.' + output.chunk.getIdOrLabel() + '.js'), output.contents);
        }));

        var indexHtmlSource = _path2.default.join(this.projectPath, 'index.html');
        var indexHtmlTarget = _path2.default.join(outputDirectory, 'index.html');
        var indexHtml = pundle.fill((yield _sbFs2.default.readFile(indexHtmlSource, 'utf8')), outputs.map(function (o) {
          return o.chunk;
        }), {
          publicRoot: pundle.config.output.publicRoot,
          bundlePath: pundle.config.output.bundlePath
        });
        yield _sbFs2.default.writeFile(indexHtmlTarget, indexHtml);
      });

      function writeToDisk(_x3) {
        return _ref3.apply(this, arguments);
      }

      return writeToDisk;
    }()
  }, {
    key: 'getPundle',
    value: function () {
      var _ref4 = _asyncToGenerator(function* () {
        var _this2 = this;

        var development = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        return _pundle2.default.create({
          entry: ['./'],
          debug: this.options.debug,

          presets: [[require.resolve('pundle-preset-default'), {
            generator: {
              pathType: this.config.pathType === 'number' ? 'number' : 'filePath'
            },
            reporter: {
              log: function log(o) {
                return _this2.log(o);
              }
            }
          }]].concat(_toConsumableArray(this.config.pundle.presets)),

          components: [[require.resolve('pundle-plugin-dedupe'), {
            debug: this.options.debugDedupe
          }], require.resolve('pundle-plugin-commons-chunk'), [require.resolve('pundle-plugin-npm-installer'), {
            save: this.config.saveNpmModules,
            silent: true,
            beforeInstall: function beforeInstall(name) {
              if (!development) {
                return;
              }
              _this2.cli.addSpinner('Installing ' + name);
            },
            afterInstall: function afterInstall(name, error) {
              if (!development) {
                return;
              }
              _this2.cli.removeSpinner('Installing ' + name);
              if (error) {
                _this2.log('Failed to install ' + name + ' because ' + (0, _helpers.getNpmErrorMessage)(error.message));
              } else {
                _this2.log('Successfully installed ' + name);
              }
            },
            extensions: ['js']
          }], [require.resolve('pundle-transformer-babel'), {
            config: this.config.babel,
            extensions: ['js']
          }], (0, _pundleApi.createPlugin)(function () {
            var _ref5 = _asyncToGenerator(function* (_, __, file) {
              if (!development) {
                return;
              }
              if (_this2.options.debugTickAll || file.filePath.indexOf(_this2.projectPath) === 0 && file.filePath.indexOf('node_modules') === -1) {
                var relative = _path2.default.relative(_this2.projectPath, file.filePath);
                _this2.log(_chalk2.default.dim(_path2.default.join('$root', relative)) + ' ' + _chalk2.default.green(_helpers.TICK));
              }
            });

            return function (_x5, _x6, _x7) {
              return _ref5.apply(this, arguments);
            };
          }())].concat(_toConsumableArray(this.config.pundle.components)),

          output: {
            bundlePath: 'bundle.js',
            publicRoot: '/_/'
          },
          rootDirectory: this.projectPath,
          replaceVariables: {
            'process.env.NODE_ENV': JSON.stringify(development ? 'development' : 'production')
          }
        });
      });

      function getPundle() {
        return _ref4.apply(this, arguments);
      }

      return getPundle;
    }()
  }, {
    key: 'log',
    value: function log(contents) {
      this.cli.log(contents);
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      this.subscriptions.dispose();
    }
  }]);

  return Compilation;
}();

exports.default = Compilation;