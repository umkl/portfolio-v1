#!/usr/bin/env node
'use strict';

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _sbCommand = require('sb-command');

var _sbCommand2 = _interopRequireDefault(_sbCommand);

var _package = require('../../package.json');

var _package2 = _interopRequireDefault(_package);

var _helpers = require('./helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require('process-bootstrap')('motion');

var currentDirectory = process.cwd();

_sbCommand2.default.version('Motion v' + _package2.default.version).option('--debug', 'Enable stack traces of errors, useful for debugging', false).option('--debug-dedupe', 'Enable logs about things dedupe picks and leaves out', false).option('--debug-tick-all', 'Show all files in watcher ticks instead including files in node_modules', false).option('--disable-cache', 'Disable use of cache when bundling files', false).command('new <name>', 'Create a new motion app with the given name', function (options, name) {
  (0, _helpers.getMotion)(options, _path2.default.join(currentDirectory, name), function (motion) {
    return motion.init().then(function () {
      motion.compilation.log((0, _helpers.messageNew)(name));
    });
  });
}).command('init', 'Copy motion configuation files into the current directory', function (options) {
  (0, _helpers.getMotion)(options, currentDirectory, function (motion) {
    return motion.init().then(function () {
      motion.compilation.log((0, _helpers.messageInit)());
    });
  });
}).command('build', 'Build dist files of the current motion app', function (options) {
  (0, _helpers.getMotion)(options, currentDirectory, function (motion) {
    return motion.build().then(function () {
      motion.compilation.log((0, _helpers.messageBuild)(_path2.default.relative(currentDirectory, motion.config.outputDirectory)));
    });
  });
}).command('watch', 'Make the Motion CLI run Dev server and watch the files for changes', function (options) {
  (0, _helpers.getMotion)(options, currentDirectory, function (motion) {
    return motion.watch().then(function (exitStatus) {
      if (!exitStatus) {
        process.exit(1);
      }
    });
  });
}).process(process.argv);